#!/usr/bin/env python3
import rospy

from mas_knowledge_utils.ontology_query_interface import OntologyQueryInterface
from mas_knowledge_base.knowledge_base_interface import KnowledgeBaseInterface

class OntologyExporter(object):
    def __init__(self):
        ontology_uri = rospy.get_param('/ontology_url', None)
        if not ontology_uri:
            raise RuntimeError('ontology_url not set')
        ontology_base_url = rospy.get_param('/ontology_base_url', None)
        ontology_entity_delimiter = rospy.get_param('/ontology_entity_delimiter', '/')
        ontology_class_prefix = rospy.get_param('/ontology_class_prefix', '')
        self.ont_query_interface = OntologyQueryInterface(ontology_file=ontology_uri,
                                                          base_url=ontology_base_url,
                                                          entity_delimiter=ontology_entity_delimiter,
                                                          class_prefix=ontology_class_prefix)
        self.kb_interface = KnowledgeBaseInterface()

    def export_ontology_to_kb(self):
        '''Inserts all class assertions in the ontology as instances in the
        knowledge base and all property assertions as facts in the
        knowledge base.

        For every property, the domain and range are used
        as names for the variables in the facts; an exception to this is the
        case in which the domain and range are the same, when 0 and 1 are
        appended to the variable names to prevent name clashes.

        Example: Let's assume that we have a property
            objectAt: Object -> Location
        and an assertion of this property
            MyBottle objectAt Kitchen
        In this case, a fact of the form
            objectAt (MyBottle: Object, Kitchen: Location)
        will be inserted in the knowledge base.

        Example 2: Let's assume that we have a property
            on: Object -> Object
        and an assertion of the property
            MyBottle on DiningTable
        Here, a fact of the form
            on (MyBottle: Object0, Table: Object1)
        will be inserted in the knowledge base, where 0 and 1 have been appended
        to Object to prevent name ambiguities.

        '''
        classes = self.ont_query_interface.get_classes()
        instances_to_add = []
        for c in classes:
            class_instances = self.ont_query_interface.get_instances_of(c)
            instances_to_add += [(c, instance) for instance in class_instances]

        print('Inserting instances')
        self.kb_interface.insert_instances(instances_to_add)

        object_properties = self.ont_query_interface.get_object_properties()
        facts_to_add = []
        for obj_property in object_properties:
            (prop_domain, prop_range) = self.ont_query_interface.get_property_domain_range(obj_property)
            subj_obj_pairs = self.ont_query_interface.get_all_subjects_and_objects(obj_property)

            for subj, obj in subj_obj_pairs:
                fact = None
                if prop_range == 'boolean':
                    if obj.lower() == 'true':
                        fact = [obj_property, [(prop_domain, subj)]]
                # we don't insert numeric values in the knowledge base
                elif prop_range in ('integer', 'float'):
                    continue
                else:
                    if prop_domain != prop_range:
                        fact = [obj_property, [(prop_domain, subj),
                                               (prop_range, obj)]]
                    else:
                        fact = [obj_property, [(prop_domain + '0', subj),
                                               (prop_range + '1', obj)]]

                facts_to_add.append(fact)

        print('Inserting facts')
        self.kb_interface.insert_facts(facts_to_add)

        print('Ontology export complete')

    def update_instance_in_list(self, instance, instance_type, instance_list):
        '''Inserts or updates "instance" in "instance_list". In particular:
        * returns "instance_list" if an entry (instance_type, instance) already exists
        * returns an updated "instance_list" otherwise:
            * if "instance" already exists in an entry in "instance_list", but the types
              are different, takes the more specific type as the type of "instance" if
              the types are in a ancestor/descendant relation. If the types are disjoint,
              keeps the already existing type of "instance"
            * if "instance" does not exist in any entry, a new entry
            (instance_list, instance) is added to "instance_list"

        Keyword arguments:
        @param instance: str -- name of an instance in the ontology
        @param instance_type: str -- type of "instance"
        @param instance_list: Sequence[Tuple[str, str]] -- list of (type, instance) tuples

        '''
        if (instance_type, instance) in instance_list:
            return instance_list

        instance_inserted = False
        for i, (inst_type, inst) in enumerate(instance_list):
            if inst == instance:
                if self.ont_query_interface.is_subclass_of(instance_type, inst_type):
                    instance_list[i] = (instance_type, inst)
                    instance_inserted = True
                elif self.ont_query_interface.is_subclass_of(inst_type, instance_type):
                    instance_list[i] = (inst_type, inst)
                    instance_inserted = True
                else:
                    print('WARNING: {0} exists as an instance of two unrelated classes {1} and {2}'.format(inst, instance_type, inst_type))
                    print('WARNING: Only exporting type {0}'.format(inst_type))

        if not instance_inserted:
            instance_list.append((instance_type, instance))
        return instance_list

if __name__ == '__main__':
    rospy.init_node('ontology_exporter')
    ONTOLOGY_EXPORTER = OntologyExporter()
    ONTOLOGY_EXPORTER.export_ontology_to_kb()
